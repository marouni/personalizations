" Bootstrapping
" =============
"
" mkdir -p ~/.vim/bundle
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"
" :PluginList
" :PluginInstall

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'Lokaltog/vim-easymotion'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'klen/python-mode'
Plugin 'derekwyatt/vim-scala'
Plugin 'ctrlpvim/ctrlp.vim'

call vundle#end()

filetype plugin indent on

" Conf: general vim
" ==================
" Display
set number
set showcmd
set cursorline
set wildmenu
colorscheme solarized

"set ruler
" Search
set hlsearch
set incsearch
set smartcase

" Tabs
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
"set textwidth=80

" Syntax
syntax on

" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" No auto indenting during copy-paste, but no auto-formatting
" set paste

if has("autocmd")
  " Replace cursor at same position upon next editing
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \ | exe "normal! g'\"" | endif
  " Special indenting for Python PEP8
  au BufNewFile,BufRead *.py setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79 autoindent fileformat=unix
  au FileType python setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79 autoindent fileformat=unix
  " C style
  au BufNewFile,BufRead *.c,*.h,*.cpp setlocal cindent
  " tex, HTML
  au FileType tex setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2
  au FileType html setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2

  "au BufNewFile,BufRead *.tex setlocal tabstop=2 softtabstop=2 shiftwidth=2
  " Auto-correcting .tex files
  "augroup filetypedetect
  "au BufNewFile,BufRead *.tex setlocal spell spelllang=fr
  "augroup END

endif

" Buffer shortcuts
" Possible to leave modified buffers

set hidden

let mapleader = "#"

" Conf: plugins
" =============
" The NERD tree
" -------------

map <F4> :NERDTreeToggle<CR>

" Cscope
" ------

function s:finduppperdir(file)

  let prefix = ".."
  let timeout = 10
  while !filereadable(prefix . "/" . a:file) && timeout > 0
    let prefix = "../" . prefix
    let timeout = timeout - 1
  endwhile
  
  return prefix

endfunction

if has("cscope")

  set nocscopeverbose
  " TODO: Use `cscope show` to know if connection exists
  if filereadable("cscope.out")
    cscope add cscope.out
  else
    let $CSCOPE_DIR = s:finduppperdir("cscope.out")
    let $CSCOPE_DB = $CSCOPE_DIR . "/cscope.out"
    if filereadable($CSCOPE_DB)
      cscope add $CSCOPE_DB $CSCOPE_DIR
    endif
  endif

  "nnoremap <C-_> :tab cs f g <C-R>=expand("<cword>")<CR><CR>
  "nnoremap <C-_><C-_> :tab cs f s <C-R>=expand("<cword>")<CR><CR>
  nnoremap <C-_>      :cs find g <C-R>=expand("<cword>")<CR><CR>
  nnoremap <C-_><C-_> :cs find s <C-R>=expand("<cword>")<CR><CR>

endif

" EasyMotion

" ----------

map <Tab>w <Plug>(easymotion-bd-w)
map <Tab>W <Plug>(easymotion-bd-W)
map <Tab>e <Plug>(easymotion-bd-e)
map <Tab>E <Plug>(easymotion-bd-E)
map <Tab>f <Plug>(easymotion-bd-f)
map <Tab>s <Plug>(easymotion-s2)
map <Tab>h <Plug>(easymotion-linebackward)
map <Tab>j <Plug>(easymotion-j)
map <Tab>k <Plug>(easymotion-k)
map <Tab>l <Plug>(easymotion-lineforward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" ctrlp
set runtimepath^=~/.vim/bundle/ctrlp.vim

""""""""""""""""""""""""""""""

" airline
""""""""""""""""""""""""""""""

let g:airline_theme             = 'powerlineish'
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1
"" vim-powerline symbols
"let g:airline_left_sep          = '<'
"let g:airline_left_alt_sep      = '<'
"let g:airline_right_sep         = '<'
"let g:airline_right_alt_sep     = '<'
"let g:airline_branch_prefix     = '<'
"let g:airline_readonly_symbol   = '<'
"let g:airline_linecolumn_prefix = '<'

" Powerline setup
set laststatus=2
set term=xterm-256color
set termencoding=utf-8
set guifont=Ubuntu\ Mono\ derivative\ Powerline:10
set guifont=Ubuntu\ Mono
let g:Powerline_symbols = 'fancy'

" disable rope in pymode
let g:pymode_rope = 0

" disable paste brackted mode
set t_BE=

" Remember last line
if has("autocmd")
      au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif
